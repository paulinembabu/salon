/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import java.util.Map;
import java.util.*;
import spark.ModelAndView;
import spark.template.velocity.VelocityTemplateEngine;
import static spark.Spark.*;

public class App {
   

public static void main(String[] args){
staticFileLocation("/public");
   String layout ="templates/layout.vtl";

   get("/",(request,response) -> {
    Map<String, Object> model = new HashMap<String, Object>();
     model.put("template","templates/index.vtl");
     model.put("stylists",Stylist.all());
     return new ModelAndView(model,layout);
   }, new VelocityTemplateEngine());


   get("stylists/new", (request,response) ->{
   	Map<String,Object> model =new HashMap<String,Object>();
   	model.put("template","templates/stylist-form.vtl");
   	 return new ModelAndView(model,layout);
   }, new VelocityTemplateEngine());

  

   get("/stylists", (request,response) -> {
    Map<String,Object> model = new HashMap<String,Object>();
    model.put("stylists",Stylist.all());
    model.put("template","templates/stylists.vtl");
    return new ModelAndView(model,layout);
}, new VelocityTemplateEngine());

    get("/stylists/:id ",(request,response) -> {
    Map<String, Object> model = new HashMap<String, Object>();
   	Stylist stylist = Stylist.find(Integer.parseInt(request.params(":id")));
   	model.put("stylist",stylist);
    // Client client = Client.find()
    model.put("clients", stylist.getClients());
   	model.put("template","templates/stylist.vtl");
   	return new ModelAndView(model,layout);
     }, new VelocityTemplateEngine());

  post("/stylists/:id",(request,response) -> {
   Map<String,Object> model = new HashMap<String,Object>();
   Stylist stylist = Stylist.find(Integer.parseInt(request.params(":id")));
   String  name = request.queryParams("name");
   String  specialization = request.queryParams("specialization");
   // Stylist stylist = Stylist.find(client.getStylistId());
   stylist.update(name,specialization);
   String url = String.format("/stylists/%d",stylist.getId());
   response.redirect(url);
   return new ModelAndView(model, layout) ;
    }, new VelocityTemplateEngine());  
 
 post("/stylists/:id/delete",(request,response) -> {
    Map<String,Object> model = new HashMap<String,Object>();
    Stylist stylist = Stylist.find(Integer.parseInt(request.params(":id")));
   // Stylist stylist = Stylist.find(client.getStylistId());
   stylist.delete();
   stylist.deleteClients();
   String url = String.format("/stylists");
   response.redirect(url);
   return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());
  
  post("/stylists",(request,response) -> {
  	Map<String,Object> model = new HashMap<String,Object>();
  	String name = request.queryParams("name");
  	String specialization =request.queryParams("stylistSpecialization");
  	Stylist newStylist = new Stylist(name,specialization);
  	newStylist.save();
  	String url =String.format("/stylists");
    response.redirect(url);
  	return new ModelAndView(model,layout);
  }, new VelocityTemplateEngine());


   get("clients/new", (request,response) ->{
   	Map<String,Object> model =new HashMap<String,Object>();
   	model.put("stylists",Stylist.all());
   	model.put("template","templates/stylist-client-form.vtl");
   	 return new ModelAndView(model,layout);
   }, new VelocityTemplateEngine());

  

   get("/clients", (request,response) -> {
    Map<String,Object> model = new HashMap<String,Object>();
    model.put("clients",Client.all());
    model.put("template","templates/clients.vtl");
    return new ModelAndView(model,layout);
  }, new VelocityTemplateEngine());

   get("/clients/:id ",(request,response) -> {
    Map<String, Object> model = new HashMap<String, Object>();
    Client client = Client.find(Integer.parseInt(request.params(":id")));
    model.put("client",client);
    model.put("template","templates/client.vtl");
    return new ModelAndView(model,layout);
     }, new VelocityTemplateEngine());
   

    post("/clients",(request,response) -> {
  	Map<String,Object> model = new HashMap<String,Object>();
  	String name = request.queryParams("name");
  	String contact =request.queryParams("contact");
  	Stylist stylist = Stylist.find(Integer.parseInt(request.queryParams("stylistId")));
  	Client newClient = new Client(name,contact,stylist.getId());
  	newClient.save();
  	// model.put("template","templates/clients.vtl");
    String url =String.format("/clients");
    response.redirect(url);
  	return new ModelAndView(model,layout);
  }, new VelocityTemplateEngine()); 


   get("/stylists/:stylist_id/clients/:id",(request,response) -> {
   Map<String,Object> model = new HashMap<String,Object>();
   Stylist stylist = Stylist.find(Integer.parseInt(request.params(":stylist_id")));
   Client client = Client.find(Integer.parseInt(request.params(":id")));
   model.put("stylist",stylist);
   model.put("client",client);
   model.put("template","templates/client.vtl");
   return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());
  

  post("/stylists/:stylist_id/clients/:id",(request,response) -> {
  Map<String,Object> model = new HashMap<String,Object>();
  Stylist stylist = Stylist.find(Integer.parseInt(request.params(":stylist_id")));
   Client client = Client.find(Integer.parseInt(request.params(":id")));
   String  name = request.queryParams("name");
   String  contact = request.queryParams("contact");
   // Stylist stylist = Stylist.find(client.getStylistId());
     client.update(name,contact);
   String url = String.format("/stylists/%d/clients/%d",stylist.getId(), client.getId());
   response.redirect(url);
   return new ModelAndView(model, layout) ;
    }, new VelocityTemplateEngine());  
 
 post("/stylists/:stylist_id/clients/:id/delete",(request,response) -> {
    Map<String,Object> model = new HashMap<String,Object>();
    Stylist stylist = Stylist.find(Integer.parseInt(request.params(":stylist_id")));
   Client client = Client.find(Integer.parseInt(request.params(":id")));
   // Stylist stylist = Stylist.find(client.getStylistId());
   client.delete();
   model.put("stylist",stylist);
   model.put("template","templates/stylist.vtl");
   return new ModelAndView(model, layout);
    }, new VelocityTemplateEngine());
}
}


    
    